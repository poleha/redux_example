{"version":3,"sources":["configureStore.js"],"names":[],"mappings":";;;;;kBAKwB;;AALxB;;AACA;;;;AACA;;AACA;;;;;;AAEe,SAAS,cAAT,CAAwB,YAAxB,EAAsC;AACnD,MAAM,SAAS,4BAAT,CAD6C;AAEnD,MAAM,QAAQ,4CAEV,YAFU,EAGV,uCAHU;AAIV,8BAAgB,MAAhB,CAJU,CAAR;;;;;;;;;;;;;;;AAF6C,MAqB/C,OAAO,GAAP,EAAY;AACd,WAAO,GAAP,CAAW,MAAX,CAAkB,aAAlB,EAAiC,YAAM;;AACrC,UAAM,kBAAkB,QAAQ,aAAR,CAAlB,CAD+B;AAErC,YAAM,cAAN,CAAqB,eAArB,EAFqC;KAAN,CAAjC,CADc;GAAhB;;AAOA,SAAO,KAAP,CA5BmD;CAAtC","file":"configureStore-compiled.js","sourcesContent":["import { createStore, applyMiddleware } from 'redux'\nimport rootReducer from '../reducers'\nimport { ping } from './enhancers/ping' // <!-- подключаем наш enhancer\nimport createLogger from 'redux-logger'\n\nexport default function configureStore(initialState) {\n  const logger = createLogger();\n  const store = createStore(\n      rootReducer,\n      initialState,\n      applyMiddleware(ping), // <!-- добавляем enhancer в цепочку middleware'ов\n      applyMiddleware(logger));\n\n  //A store holds the whole state tree of your application.\n  //The only way to change the state inside it is to dispatch an action on it.\n  //A store is not a class. It’s just an object with a few methods on it.\n  //To create it, pass your root reducing function to createStore.\n  //http://redux.js.org/docs/api/Store.html\n\n  //Store Methods\n\n//getState()\n//dispatch(action)\n//subscribe(listener)\n//replaceReducer(nextReducer)  Не используется в обычной среде\n\n  if (module.hot) {\n    module.hot.accept('../reducers', () => {  //module.hot.accept('../reducers', function () {\n      const nextRootReducer = require('../reducers');\n      store.replaceReducer(nextRootReducer);\n    });\n  }\n\n  return store;\n}"]}